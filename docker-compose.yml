services:
  api:
    build:
      context: .
      dockerfile: api-service/Dockerfile
    command: ["/app/bin/api-service-binary"]
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - API_PORT=${API_PORT}
      - POSTGRES_CONN=${POSTGRES_CONN}
      - INFLUX_ADDR=${INFLUX_ADDR}
      - INFLUX_DB=${INFLUX_DB}
      - INFLUX_USER=${INFLUX_USER}
      - INFLUX_PASS=${INFLUX_PASS}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - ALERT_TOPIC=${ALERT_TOPIC}
      - GROUP_ID=${GROUP_ID}
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      db: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ingest:
    build:
      context: .
      dockerfile: ingest-service/Dockerfile
    command: ["/app/bin/ingest-service-binary"]
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      - INGEST_PORT=${INGEST_PORT}
      - INFLUX_ADDR=${INFLUX_ADDR}
      - INFLUX_DB=${INFLUX_DB}
      - INFLUX_USER=${INFLUX_USER}
      - INFLUX_PASS=${INFLUX_PASS}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - OBS_TOPIC=${OBS_TOPIC}
      - GROUP_ID=${GROUP_ID}
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  processing:
    build:
      context: .
      dockerfile: processing-service/Dockerfile
    command: ["/app/bin/processing-service-binary"]
    env_file:
      - .env
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - OBS_TOPIC=${OBS_TOPIC}
      - ALERT_TOPIC=${ALERT_TOPIC}
      - GROUP_ID=${GROUP_ID}
      - POSTGRES_CONN=${POSTGRES_CONN}
      - INFLUX_ADDR=${INFLUX_ADDR}
      - INFLUX_DB=${INFLUX_DB}
      - INFLUX_USER=${INFLUX_USER}
      - INFLUX_PASS=${INFLUX_PASS}
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      db: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ml-service:
    build: ./ml-service
    ports:
      - "8000:8000"
    environment:
      - INFLUX_HOST=${INFLUX_HOST}
      - INGEST_PORT=${INGEST_PORT}
      - INFLUX_ADDR=${INFLUX_ADDR}
      - INFLUX_DB=${INFLUX_DB}
      - INFLUX_USER=${INFLUX_USER}
      - INFLUX_PASS=${INFLUX_PASS}
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 1"]
      interval: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./ml_data:/app/app/model
      
  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=${INFLUX_DB}
      - INFLUXDB_ADMIN_USER=${INFLUX_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUX_PASS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - influxdata:/var/lib/influxdb

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    ports:
      - "9092:9092"   
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

volumes:
  pgdata:
  influxdata: